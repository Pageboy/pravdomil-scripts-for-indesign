// Generated by CoffeeScript 1.12.4
(function() {
  var conformFile, epub_export, findDomain, main;

  main = function() {
    var doc;
    if (!app.activeDocument) {
      return;
    }
    doc = app.activeDocument;
    if (!doc.fullName) {
      return;
    }
    epub_export(doc);
  };

  epub_export = function(doc) {
    var basename, basenameWithoutExt, file, filename, folder, i, parts, showDialog, title;
    folder = findDomain(doc.filePath);
    if (!folder) {
      return alert('No domain folder found');
    }
    basename = doc.fullName.displayName;
    basenameWithoutExt = basename.substring(0, basename.lastIndexOf('.'));
    parts = basenameWithoutExt.split('-');
    title = parts[0].trim();
    filename = parts.length === 1 ? 'index' : parts.slice(1).join('-').trim();
    file = new File(folder + '/' + filename + '.html');
    doc.exportFile(ExportFormat.HTMLFXL, file, (showDialog = false));
    conformFile(file, title, filename);
    i = 0;
    while (true) {
      i++;
      file = new File(folder + '/' + filename + '-' + i + '.html');
      if (file.exists === false) {
        break;
      }
      conformFile(file, title, filename);
    }
  };

  conformFile = function(file, title, filename) {
    var content;
    file.open('e');
    content = file.read();
    content = content.replace('<title>' + filename + '</title>', '<title>' + title + '</title> <meta name="viewport" content="width=device-width" /> <script>window.top.isPreviewFile = function() { return {} }</script> <script>window.top.shouldNavigate = function() { return true }</script>');
    content = content.replace('style="', 'style="margin: auto; position: relative; ');
    file.seek(0);
    file.write(content);
    return file.close();
  };

  findDomain = function(path) {
    var file, j, len, ref;
    ref = new Folder(path).getFiles();
    for (j = 0, len = ref.length; j < len; j++) {
      file = ref[j];
      if (file.displayName.match(/\.(cz|com)$/)) {
        return file;
      }
    }
  };

  String.prototype.trim = function() {
    return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
  };

  main();

}).call(this);
